// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now()) //Para la fecha de membresía
  updatedAt DateTime @updatedAt

  // Relaciones:
  posts Post[] // Uno a muchos
  comments Comment[] // Uno a muchos
  likes Like[] // Uno a muchos
  reposts Repost[] // Relación con reposts

  followers Follows[] @relation("following") // Usuarios que siguen a este usuario
  following Follows[] @relation("follower") // Usuarios a los que sigue este usuario

  notifications Notification[] @relation("userNotifications") // Notificaciones recividas por un usuario
  notificationsCreated Notification[] @relation("notificationCreator") // Notificaciones enviadas por un usuario
}


model Post{
  id        String    @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relaciones:
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade) // Si un usuario se elimina se eliminan todos sus posts automáticamente
  comments Comment[] 
  likes Like[] 
  notifications Notification[] 
  reposts Repost[] // Relación con reposts
}


model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  image String?
  createdAt DateTime @default(now())

  // Relaciones:
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[] 

  @@index([authorId,postId]) // Respuestas más rápidas
}

model Like {
  id        String   @id @default(cuid())
  postId    String                 
  userId    String                 
  createdAt DateTime @default(now())

  // Relaciones:
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // Respuestas más rápidas
  @@unique([userId,postId]) // Prevenir que un usuario de a like varias más de una vez
}


model Repost {
  id        String   @id @default(cuid())
  postId    String                  
  userId    String                  
  content   String?  
  image     String?  
  createdAt DateTime @default(now())

  // Relaciones:
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[] 

  @@index([userId, postId]) // Respuestas más rápidas
  @@unique([userId, postId]) // Prevenir reposts duplicados de un mismo post por un usuario
}


model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relaciones:
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // Respuestas más rápidas
  @@id([followerId, followingId]) // Evitar follows duplicados
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?
  repostId String?               
  createdAt DateTime @default(now())
  
  // Relaciones:
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  repost Repost? @relation(fields: [repostId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
  REPOST
  CITED
}
